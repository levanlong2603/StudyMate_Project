class StudyMateChatbot {
  constructor() {
    this.userData = {};
    this.chatHistory = [];
    this.isFirstInteraction = true;
    this.currentContext = null;
    this.initUI();
    this.setupEventListeners();
    this.loadUserPreferences();
    this.greetUser();
  }

  // Initialize chatbot UI
  initUI() {
    // Create main container
    this.chatbotContainer = document.createElement('div');
    this.chatbotContainer.id = 'studymate-chatbot';
    this.chatbotContainer.className = 'chatbot-container hidden';
    this.chatbotContainer.innerHTML = `
      <div class="chatbot-header">
        <div class="chatbot-title">
          <span class="chatbot-icon">üìö</span>
          <h3>StudyMate Assistant</h3>
        </div>
        <div class="chatbot-controls">
          <button class="minimize-btn">‚àí</button>
          <button class="close-btn">√ó</button>
        </div>
      </div>
      <div class="chatbot-body">
        <div class="chatbot-messages" id="chat-messages"></div>
        <div class="chatbot-input-area">
          <textarea id="user-input" placeholder="Nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu c·ªßa b·∫°n..." rows="1"></textarea>
          <button id="send-btn">G·ª≠i</button>
        </div>
        <div class="chatbot-footer">
          <div class="quick-actions">
            <button class="quick-btn" data-action="find-docs">T√¨m t√†i li·ªáu</button>
            <button class="quick-btn" data-action="my-files">T√†i li·ªáu c·ªßa t√¥i</button>
            <button class="quick-btn" data-action="ptit-library">Th∆∞ vi·ªán PTIT</button>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(this.chatbotContainer);
    
    // Create toggle button
    this.toggleButton = document.createElement('div');
    this.toggleButton.className = 'chatbot-toggle';
    this.toggleButton.innerHTML = `
      <span class="chatbot-toggle-icon">üí¨</span>
      <span class="chatbot-notification"></span>
    `;
    document.body.appendChild(this.toggleButton);
    
    // Add typing indicator
    this.typingIndicator = document.createElement('div');
    this.typingIndicator.className = 'typing-indicator hidden';
    this.typingIndicator.innerHTML = `
      <div class="typing-dots">
        <span></span>
        <span></span>
        <span></span>
      </div>
      <span class="typing-text">StudyMate ƒëang tr·∫£ l·ªùi...</span>
    `;
    document.querySelector('.chatbot-messages').appendChild(this.typingIndicator);
  }

  // Set up event listeners
  setupEventListeners() {
    // Toggle chatbot
    this.toggleButton.addEventListener('click', () => this.toggleChatbot());
    
    // Close and minimize
    document.querySelector('.close-btn').addEventListener('click', () => this.closeChatbot());
    document.querySelector('.minimize-btn').addEventListener('click', () => this.minimizeChatbot());
    
    // Send message
    document.getElementById('send-btn').addEventListener('click', () => this.processUserInput());
    document.getElementById('user-input').addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.processUserInput();
      }
    });
    
    // Auto-resize textarea
    document.getElementById('user-input').addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });
    
    // Quick actions
    document.querySelectorAll('.quick-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const action = e.target.getAttribute('data-action');
        this.handleQuickAction(action);
      });
    });
  }

  // UI control methods
  toggleChatbot() {
    this.chatbotContainer.classList.toggle('hidden');
    this.toggleButton.classList.toggle('active');
    if (!this.chatbotContainer.classList.contains('hidden')) {
      document.getElementById('user-input').focus();
    }
  }

  closeChatbot() {
    this.chatbotContainer.classList.add('hidden');
    this.toggleButton.classList.remove('active');
  }

  minimizeChatbot() {
    this.chatbotContainer.classList.toggle('minimized');
    const minimizeBtn = document.querySelector('.minimize-btn');
    if (this.chatbotContainer.classList.contains('minimized')) {
      minimizeBtn.textContent = '+';
    } else {
      minimizeBtn.textContent = '‚àí';
      document.getElementById('user-input').focus();
    }
  }

  // Core functionality
  async processUserInput() {
    const inputElement = document.getElementById('user-input');
    const userMessage = inputElement.value.trim();
    
    if (userMessage === '') return;
    
    // Add user message to chat
    this.addMessage('user', userMessage);
    inputElement.value = '';
    inputElement.style.height = 'auto';
    
    // Show typing indicator
    this.showTypingIndicator();
    
    // Process after a small delay to allow UI to update
    setTimeout(async () => {
      try {
        // Process the message
        const response = await this.generateResponse(userMessage);
        
        // Add bot response
        this.addMessage('bot', response);
        
        // Update context if needed
        this.updateContext(userMessage);
        
      } catch (error) {
        console.error('Error processing message:', error);
        this.addMessage('bot', 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } finally {
        this.hideTypingIndicator();
      }
    }, 300);
  }

  // Message handling
  addMessage(sender, content, isHtml = false) {
    const messagesContainer = document.getElementById('chat-messages');
    const messageElement = document.createElement('div');
    messageElement.className = `message ${sender}-message`;
    
    if (isHtml) {
      messageElement.innerHTML = content;
    } else {
      messageElement.textContent = content;
    }
    
    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    // Add to chat history
    this.chatHistory.push({
      sender,
      content,
      timestamp: new Date().toISOString()
    });
    
    // Limit chat history to 50 messages
    if (this.chatHistory.length > 50) {
      this.chatHistory.shift();
    }
  }

  // Typing indicator
  showTypingIndicator() {
    this.typingIndicator.classList.remove('hidden');
    document.getElementById('chat-messages').scrollTop = document.getElementById('chat-messages').scrollHeight;
  }

  hideTypingIndicator() {
    this.typingIndicator.classList.add('hidden');
  }

  // Quick actions handler
  handleQuickAction(action) {
    let message = '';
    switch(action) {
      case 'find-docs':
        message = 'T√¥i mu·ªën t√¨m t√†i li·ªáu h·ªçc t·∫≠p';
        break;
      case 'my-files':
        message = 'Hi·ªÉn th·ªã t√†i li·ªáu c·ªßa t√¥i';
        break;
      case 'ptit-library':
        message = 'K·∫øt n·ªëi v·ªõi th∆∞ vi·ªán PTIT';
        break;
      default:
        return;
    }
    
    document.getElementById('user-input').value = message;
    this.processUserInput();
  }

  // Response generation
  async generateResponse(userMessage) {
    const lowerMessage = userMessage.toLowerCase();
    
    // Check for greetings
    if (this.isFirstInteraction || this.isGreeting(lowerMessage)) {
      this.isFirstInteraction = false;
      return this.getGreetingResponse();
    }
    
    // Check for farewell
    if (this.isFarewell(lowerMessage)) {
      return this.getFarewellResponse();
    }
    
    // Check for help request
    if (this.isHelpRequest(lowerMessage)) {
      return this.getHelpResponse();
    }
    
    // Check for document search
    if (this.isDocumentSearch(lowerMessage)) {
      return this.handleDocumentSearch(userMessage);
    }
    
    // Check for personal files request
    if (this.isPersonalFilesRequest(lowerMessage)) {
      return this.handlePersonalFilesRequest();
    }
    
    // Check for PTIT library request
    if (this.isPTITLibraryRequest(lowerMessage)) {
      return this.handlePTITLibraryRequest();
    }
    
    // Check for specific subjects
    const subjectResponse = this.checkForSubjectInquiry(lowerMessage);
    if (subjectResponse) {
      return subjectResponse;
    }
    
    // Default fallback
    return this.getFallbackResponse();
  }

  // Response helper methods
  isGreeting(message) {
    const greetings = ['xin ch√†o', 'hello', 'hi', 'ch√†o', 'hey', 'c√≥ ai kh√¥ng'];
    return greetings.some(greet => message.includes(greet));
  }

  getGreetingResponse() {
    const greetings = [
      `Ch√†o b·∫°n! M√¨nh l√† StudyMate Assistant, tr·ª£ l√Ω ·∫£o c·ªßa h·ªá th·ªëng StudyMate. M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay? üòä`,
      `Xin ch√†o! M√¨nh l√† tr·ª£ l√Ω StudyMate. B·∫°n c·∫ßn t√¨m t√†i li·ªáu hay h·ªó tr·ª£ g√¨ v·ªÅ h·ªçc t·∫≠p t·∫°i PTIT nh·ªâ? üìö`,
      `Ch√†o b·∫°n! M√¨nh ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm t√†i li·ªáu, qu·∫£n l√Ω h·ªçc t·∫≠p v√† k·∫øt n·ªëi v·ªõi th∆∞ vi·ªán PTIT. B·∫°n c·∫ßn g√¨ ·∫°? ‚ú®`
    ];
    return greetings[Math.floor(Math.random() * greetings.length)];
  }

  isFarewell(message) {
    const farewells = ['t·∫°m bi·ªát', 'bye', 'goodbye', 'see you', 'th√¥i'];
    return farewells.some(farewell => message.includes(farewell));
  }

  getFarewellResponse() {
    const farewells = [
      'T·∫°m bi·ªát b·∫°n! Ch√∫c b·∫°n h·ªçc t·∫≠p hi·ªáu qu·∫£ nh√©! üòä',
      'H·∫πn g·∫∑p l·∫°i b·∫°n! ƒê·ª´ng ng·∫ßn ng·∫°i quay l·∫°i n·∫øu c·∫ßn h·ªó tr·ª£ nh√©! ‚ù§Ô∏è',
      'T·∫°m bi·ªát! N·∫øu c·∫ßn t√¨m t√†i li·ªáu hay h·ªó tr·ª£ h·ªçc t·∫≠p, b·∫°n c·ª© quay l·∫°i nh√©! ‚ú®'
    ];
    return farewells[Math.floor(Math.random() * farewells.length)];
  }

  isHelpRequest(message) {
    const helpPhrases = ['gi√∫p', 'h·ªó tr·ª£', 'l√†m sao', 'h∆∞·ªõng d·∫´n', 'help', 'support'];
    return helpPhrases.some(phrase => message.includes(phrase));
  }

  getHelpResponse() {
    return `M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c ch·ª©c nƒÉng sau:\n\n` +
    `üîç T√¨m ki·∫øm t√†i li·ªáu: T√¨m gi√°o tr√¨nh, b√†i gi·∫£ng, ƒë·ªÅ thi theo m√¥n h·ªçc\n` +
    `üìÇ Qu·∫£n l√Ω t√†i li·ªáu c√° nh√¢n: L∆∞u tr·ªØ v√† t·ªï ch·ª©c t√†i li·ªáu c·ªßa b·∫°n\n` +
    `üè´ K·∫øt n·ªëi th∆∞ vi·ªán PTIT: T√¨m s√°ch, t√†i li·ªáu t·ª´ th∆∞ vi·ªán tr∆∞·ªùng\n` +
    `‚è∞ Nh·∫Øc nh·ªü h·ªçc t·∫≠p: Thi·∫øt l·∫≠p l·ªãch h·ªçc, nh·∫Øc h·∫°n n·ªôp b√†i\n\n` +
    `B·∫°n c·∫ßn h·ªó tr·ª£ c·ª• th·ªÉ v·ªÅ m·ª•c n√†o ·∫°?`;
  }

  isDocumentSearch(message) {
    const keywords = ['t√¨m t√†i li·ªáu', 't√¨m s√°ch', 't√¨m gi√°o tr√¨nh', 'b√†i gi·∫£ng', 'ƒë·ªÅ thi', 't√†i li·ªáu m√¥n'];
    return keywords.some(keyword => message.includes(keyword));
  }

  async handleDocumentSearch(message) {
    // Extract subject from message
    const subject = this.extractSubjectFromMessage(message);
    
    if (subject) {
      // Simulate API call to search for documents
      try {
        const results = [
          { title: "Gi√°o tr√¨nh h·ªçc c∆° b·∫£n", type: "PDF", link: "https://example.com/gi√°o-tr√¨nh" },
          { title: "B√†i gi·∫£ng m√¥n h·ªçc", type: "PPT", link: "https://example.com/b√†i-gi·∫£ng" },
          { title: "ƒê·ªÅ thi cu·ªëi k·ª≥ h·ªçc", type: "PDF", link: "https://example.com/ƒë·ªÅ-thi" },
          { title: "ƒê·ªÅ thi cu·ªëi k·ª≥ h·ªçc", type: "PDF", link: "https://example.com/ƒë·ªÅ-thi" }
        ];
        
        
        if (results.length > 0) {
          let response = `M√¨nh t√¨m th·∫•y ${results.length} t√†i li·ªáu v·ªÅ ${subject}:\n\n`;
        
          results.slice(0, 3).forEach(doc => {
            response += `üìÑ ${doc.title} - ${doc.type}\n`;
            response += `üîó ${doc.link}\n\n`;
          });
          
          if (results.length > 3) {
            response += `V√† ${results.length - 3} t√†i li·ªáu kh√°c. B·∫°n mu·ªën xem th√™m kh√¥ng?`;
          }
          
          return response;
        }
        
        else {
          return `M√¨nh kh√¥ng t√¨m th·∫•y t√†i li·ªáu n√†o v·ªÅ <strong>${subject}</strong>. B·∫°n mu·ªën t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c kh√¥ng?`;
        }
      } catch (error) {
        console.error('Search error:', error);
        return 'Xin l·ªói, c√≥ l·ªói khi t√¨m ki·∫øm t√†i li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.';
      }
    } else {
      return 'B·∫°n mu·ªën t√¨m t√†i li·ªáu v·ªÅ m√¥n h·ªçc n√†o? Vui l√≤ng cho m√¨nh bi·∫øt t√™n m√¥n h·ªçc ho·∫∑c ch·ªß ƒë·ªÅ c·ª• th·ªÉ nh√©!';
    }
  }

  isPersonalFilesRequest(message) {
    const keywords = ['t√†i li·ªáu c·ªßa t√¥i', 'file c·ªßa t√¥i', 't√†i li·ªáu ƒë√£ l∆∞u', 't√†i li·ªáu c√° nh√¢n'];
    return keywords.some(keyword => message.includes(keyword));
  }

  handlePersonalFilesRequest() {
    // Check if user is logged in
    if (!this.userData.userId) {
      return 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem t√†i li·ªáu c√° nh√¢n. Vui l√≤ng ƒëƒÉng nh·∫≠p v√† th·ª≠ l·∫°i nh√©!';
    }
    
    // Simulate fetching personal files
    const folders = [
      { name: 'L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng', count: 12 },
      { name: 'M·∫°ng m√°y t√≠nh', count: 8 },
      { name: 'C∆° s·ªü d·ªØ li·ªáu', count: 15 }
    ];
    
    let response = `B·∫°n c√≥ ${folders.length} th∆∞ m·ª•c t√†i li·ªáu:\n\n`;
    folders.forEach(folder => {
      response += `üìÅ <strong>${folder.name}</strong> (${folder.count} t√†i li·ªáu)\n`;
    });
    
    response += '\nB·∫°n mu·ªën m·ªü th∆∞ m·ª•c n√†o?';
    
    return response;
  }

  isPTITLibraryRequest(message) {
    const keywords = ['th∆∞ vi·ªán ptit', 'k·∫øt n·ªëi th∆∞ vi·ªán', 's√°ch th∆∞ vi·ªán', 'm∆∞·ª£n s√°ch'];
    return keywords.some(keyword => message.includes(keyword));
  }

  handlePTITLibraryRequest() {
    return `B·∫°n c√≥ th·ªÉ k·∫øt n·ªëi v·ªõi th∆∞ vi·ªán PTIT ƒë·ªÉ:\n\n` +
      `üîç T√¨m s√°ch gi√°o tr√¨nh theo m√¥n h·ªçc\n` +
      `üìö Ki·ªÉm tra t√¨nh tr·∫°ng m∆∞·ª£n s√°ch\n` +
      `‚è≥ Xem l·ªãch s·ª≠ m∆∞·ª£n tr·∫£\n` +
      `üìå ƒê·∫∑t gi·ªØ s√°ch tr∆∞·ªõc\n\n` +
      `B·∫°n mu·ªën th·ª±c hi·ªán thao t√°c n√†o?`;
  }

  checkForSubjectInquiry(message) {
    const subjects = {
      'l·∫≠p tr√¨nh': 'B·∫°n ƒëang t√¨m t√†i li·ªáu v·ªÅ l·∫≠p tr√¨nh ·∫°? PTIT c√≥ nhi·ªÅu gi√°o tr√¨nh hay v·ªÅ C++, Java, Python. M√¨nh c√≥ th·ªÉ g·ª£i √Ω m·ªôt s·ªë t√†i li·ªáu n·∫øu b·∫°n c·∫ßn!',
      'm·∫°ng m√°y t√≠nh': 'M√¥n M·∫°ng m√°y t√≠nh c√≥ c√°c t√†i li·ªáu quan tr·ªçng v·ªÅ TCP/IP, routing, switching. B·∫°n c·∫ßn t√†i li·ªáu l√Ω thuy·∫øt hay b√†i t·∫≠p th·ª±c h√†nh?',
      'c∆° s·ªü d·ªØ li·ªáu': 'T√†i li·ªáu C∆° s·ªü d·ªØ li·ªáu th∆∞·ªùng t·∫≠p trung v√†o SQL, ERD, normalization. M√¨nh c√≥ th·ªÉ g·ª£i √Ω m·ªôt s·ªë s√°ch hay v·ªÅ MySQL v√† PostgreSQL.',
      'to√°n r·ªùi r·∫°c': 'To√°n r·ªùi r·∫°c c√≥ nhi·ªÅu t√†i li·ªáu v·ªÅ ƒë·ªì th·ªã, logic, t·ªï h·ª£p. B·∫°n c·∫ßn t√†i li·ªáu ti·∫øng Vi·ªát hay ti·∫øng Anh?'
    };
    
    for (const [subject, response] of Object.entries(subjects)) {
      if (message.includes(subject)) {
        return response;
      }
    }
    
    return null;
  }

  getFallbackResponse() {
    const fallbacks = [
      'Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu r√µ y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ di·ªÖn ƒë·∫°t c√°ch kh√°c ƒë∆∞·ª£c kh√¥ng ·∫°?',
      'M√¨nh ch∆∞a n·∫Øm b·∫Øt ƒë∆∞·ª£c c√¢u h·ªèi. B·∫°n ƒëang c·∫ßn h·ªó tr·ª£ v·ªÅ t√†i li·ªáu, th∆∞ vi·ªán hay v·∫•n ƒë·ªÅ h·ªçc t·∫≠p n√†o ·∫°?',
      'Hi·ªán m√¨nh ch∆∞a c√≥ th√¥ng tin v·ªÅ y√™u c·∫ßu n√†y. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ ch·ªß ƒë·ªÅ g√¨ c·ª• th·ªÉ h∆°n kh√¥ng?',
      'C√¢u h·ªèi c·ªßa b·∫°n kh√° th√∫ v·ªã! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ li√™n quan ƒë·∫øn t√†i li·ªáu h·ªçc t·∫≠p t·∫°i PTIT kh√¥ng ·∫°?'
    ];
    return fallbacks[Math.floor(Math.random() * fallbacks.length)];
  }

  // Utility methods
  extractSubjectFromMessage(message) {
    // Simple subject extraction - can be enhanced with NLP
    const subjectKeywords = ['m√¥n', 'h·ªçc ph·∫ßn', 't√†i li·ªáu', 's√°ch', 'gi√°o tr√¨nh', 'b√†i gi·∫£ng'];
    for (const keyword of subjectKeywords) {
      if (message.includes(keyword)) {
        // Extract text after keyword
        const startIndex = message.indexOf(keyword) + keyword.length;
        return message.substring(startIndex).trim().split(' ')[0];
      }
    }
    return null;
  }

  async searchDocuments(query) {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Mock data - in real app this would be an API call
    const mockResults = [
      { 
        title: `Gi√°o tr√¨nh ${query} c∆° b·∫£n`, 
        type: 'PDF', 
        link: '#',
        subject: query,
        year: 2022
      },
      { 
        title: `B√†i gi·∫£ng m√¥n ${query}`, 
        type: 'PPT', 
        link: '#',
        subject: query,
        year: 2023
      },
      { 
        title: `ƒê·ªÅ thi cu·ªëi k·ª≥ ${query}`, 
        type: 'PDF', 
        link: '#',
        subject: query,
        year: 2021
      }
    ];
    
    return mockResults;
  }

  // User preferences
  loadUserPreferences() {
    // In a real app, this would load from localStorage or API
    this.userData = {
      userId: 'user123', // Would be set after login
      preferredSubjects: ['L·∫≠p tr√¨nh', 'M·∫°ng m√°y t√≠nh'],
      savedDocuments: [],
      lastSearch: null
    };
  }

  // Context management
  updateContext(message) {
    // Simple context tracking - can be enhanced
    if (this.isDocumentSearch(message)) {
      this.currentContext = 'document_search';
    } else if (this.isPersonalFilesRequest(message)) {
      this.currentContext = 'personal_files';
    } else if (this.isPTITLibraryRequest(message)) {
      this.currentContext = 'ptit_library';
    } else {
      this.currentContext = null;
    }
  }

  // Initial greeting
  greetUser() {
    setTimeout(() => {
      this.addMessage('bot', this.getGreetingResponse());
    }, 1000);
  }
}

// Initialize chatbot when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  window.studyMateBot = new StudyMateChatbot();
});

// Add CSS styles
const style = document.createElement('style');
style.textContent = `
  .chatbot-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 350px;
    height: 500px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    display: flex;
    flex-direction: column;
    z-index: 1000;
    transition: all 0.3s ease;
    overflow: hidden;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  
  .chatbot-container.hidden {
    opacity: 0;
    transform: translateY(20px);
    pointer-events: none;
  }
  
  .chatbot-container.minimized {
    height: 60px;
  }
  
  .chatbot-header {
    background:rgb(156, 35, 35);
    color: white;
    padding: 12px 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
  }
  
  .chatbot-title {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .chatbot-icon {
    font-size: 20px;
  }
  
  .chatbot-controls button {
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    cursor: pointer;
    padding: 0 5px;
    opacity: 0.8;
  }
  
  .chatbot-controls button:hover {
    opacity: 1;
  }
  
  .chatbot-body {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
  
  .chatbot-messages {
    flex: 1;
    padding: 15px;
    overflow-y: auto;
    background: #f5f7fa;
  }
  
  .message {
    margin-bottom: 12px;
    padding: 10px 15px;
    border-radius: 18px;
    max-width: 80%;
    line-height: 1.4;
    position: relative;
    word-wrap: break-word;
  }
  
  .user-message {
    background:rgb(175, 74, 74);
    color: white;
    margin-left: auto;
    border-bottom-right-radius: 4px;
  }
  
  .bot-message {
    background: white;
    color: #333;
    margin-right: auto;
    border-bottom-left-radius: 4px;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  }
  
  .chatbot-input-area {
    display: flex;
    padding: 10px;
    border-top: 1px solid #eee;
    background: white;
  }
  
  #user-input {
    flex: 1;
    border: 1px solid #ddd;
    border-radius: 20px;
    padding: 10px 15px;
    resize: none;
    outline: none;
    max-height: 100px;
    font-family: inherit;
  }
  
  #send-btn {
    background:rgb(175, 74, 74);
    color: white;
    border: none;
    border-radius: 20px;
    padding: 0 15px;
    margin-left: 8px;
    cursor: pointer;
  }
  
  #send-btn:hover {
    background:rgb(159, 58, 58);
  }
  
  .chatbot-footer {
    padding: 10px;
    background: white;
    border-top: 1px solid #eee;
  }
  
  .quick-actions {
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
  }
  
  .quick-btn {
    background: #f0f4ff;
    color:rgb(175, 74, 74);
    border: none;
    border-radius: 15px;
    padding: 5px 10px;
    font-size: 12px;
    cursor: pointer;
    white-space: nowrap;
  }
  
  .quick-btn:hover {
    background: #e0e4ff;
  }
  
  .chatbot-toggle {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 60px;
    height: 60px;
    background:rgb(146, 32, 38);
    color: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 24px;
    cursor: pointer;
    box-shadow: 0 3px 10px rgba(0,0,0,0.2);
    z-index: 999;
    transition: all 0.3s ease;
  }
  
  .chatbot-toggle:hover {
    background:rgb(159, 58, 58);
    transform: scale(1.05);
  }
  
  .chatbot-toggle.active {
    background:rgb(143, 42, 42);
  }
  
  .chatbot-notification {
    position: absolute;
    top: 5px;
    right: 5px;
    width: 10px;
    height: 10px;
    background: #ff4757;
    border-radius: 50%;
    display: none;
  }
  
  .typing-indicator {
    display: flex;
    align-items: center;
    margin-bottom: 12px;
    padding: 10px 15px;
    background: white;
    border-radius: 18px;
    max-width: 80%;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  }
  
  .typing-indicator.hidden {
    display: none;
  }
  
  .typing-dots {
    display: flex;
    margin-right: 8px;
  }
  
  .typing-dots span {
    width: 8px;
    height: 8px;
    background: #ccc;
    border-radius: 50%;
    margin: 0 2px;
    animation: typingAnimation 1.4s infinite ease-in-out;
  }
  
  .typing-dots span:nth-child(1) {
    animation-delay: 0s;
  }
  
  .typing-dots span:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  .typing-dots span:nth-child(3) {
    animation-delay: 0.4s;
  }
  
  .typing-text {
    font-size: 14px;
    color: #666;
  }
  
  @keyframes typingAnimation {
    0%, 60%, 100% { transform: translateY(0); }
    30% { transform: translateY(-5px); }
  }
  
  /* Responsive adjustments */
  @media (max-width: 480px) {
    .chatbot-container {
      width: 100%;
      height: 100%;
      bottom: 0;
      right: 0;
      border-radius: 0;
    }
    
    .chatbot-toggle {
      bottom: 10px;
      right: 10px;
    }
  }
`;
document.head.appendChild(style);